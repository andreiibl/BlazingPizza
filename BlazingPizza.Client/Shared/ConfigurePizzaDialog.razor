@inject HttpClient HttpClient


        <div class="dialog-title">
            <h2>@Pizza.Special?.Name</h2>
            @Pizza.Special?.Description
        </div>
        <form class="dialog-body">
            <div>
                <label>Punto de la carne:</label>
                <select @bind="Pizza.Cooking">
                    <option value="@Pizza.CookingLevel.PocoHecha">Poco hecha</option>
                    <option value="@Pizza.CookingLevel.AlPunto">Al punto</option>
                    <option value="@Pizza.CookingLevel.Hecha">Hecha</option>
                    <option value="@Pizza.CookingLevel.MuyHecha">Muy hecha</option>
                </select>
            </div>
            <div>
                <label>Complementos extras:</label>
                @if (toppings is null)
                {
                    <select class="custom-select" disabled>
                        <option>(loading...)</option>
                    </select>
                }
                else if (Pizza.Toppings.Count >= 6)
                {
                    <div>(Limite alcanzado)</div>
                }
                else
                {
                    <select class="custom-select" @onchange="ToppingSelected">
                        <option value="-1" disabled selected>(select)</option>
                        @for (var i = 0; i < toppings.Count; i++)
                        {
                            <option value="@i">@toppings[i].Name - (@(toppings[i].GetFormattedPrice())€)</option>
                        }
                    </select>
                }
            </div>

            @if (Pizza.Toppings.Count > 0)
            {
                <div style="text-align: center; padding-left: 250px;">
                    <button type="button" class="btn btn-danger" @onclick="RemoveAllToppings">Eliminar todos los extras</button>
                </div>
            }

            <div class="toppings">
                @foreach (var topping in Pizza.Toppings)
                {
                    if (topping?.Topping is not null)
                    {
                        <div class="topping">
                            @topping.Topping.Name
                            <span class="topping-price">@topping.Topping.GetFormattedPrice()</span>
                            <button type="button" class="delete-topping" @onclick="@(() => RemoveTopping(topping.Topping))">x</button>
                        </div>
                    }
                }
            </div>
        </form>

        <div class="dialog-buttons">
            <button class="btn btn-secondary mr-auto" @onclick="OnCancel">Cancelar</button>
            <span class="mr-center">
                Precio: <span class="price">@(Pizza.GetFormattedTotalPrice())</span>
            </span>
            <button class="btn btn-success ml-auto" @onclick="OnConfirm">Añadir ></button>
        </div>


@code {
    List<Topping>? toppings;

    [Parameter, EditorRequired] public Pizza Pizza { get; set; } = new();
    [Parameter, EditorRequired] public EventCallback OnCancel { get; set; }
    [Parameter, EditorRequired] public EventCallback OnConfirm { get; set; }

    protected async override Task OnInitializedAsync()
    {
        toppings = await HttpClient.GetFromJsonAsync<List<Topping>>("toppings") ?? new();
    }

    void ToppingSelected(ChangeEventArgs e)
    {
        if (toppings is null) return;
        if (int.TryParse((string?)e.Value, out var index) && index >= 0)
        {
            AddTopping(toppings[index]);
        }
    }

    void AddTopping(Topping topping)
    {
        if (Pizza.Toppings.Find(pt => pt.Topping == topping) is null)
        {
            Pizza.Toppings.Add(new PizzaTopping() { Topping = topping });
        }
    }

    void RemoveTopping(Topping topping)
    {
        Pizza.Toppings.RemoveAll(pt => pt.Topping == topping);
    }

    void RemoveAllToppings()
    {
        Pizza.Toppings.Clear();
    }
}
